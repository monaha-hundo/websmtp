@page
@model IndexModel

<partial name="Sidebar" model="Model.Listing" />

<div class="content" data-bs-theme="dark">
    <section class="listing d-flex flex-column h-100">

        <partial name="SearchForm" model="Model" />

        <div class="list list-group h-100 overflow-y-scroll position-relative">
            <header class="d-flex px-1 py-2 list-group-item list-group-item-dark sticky-top z-1"
                    style="background-color: var(--bs-body-bg)">
                <div style="flex: 0 0 120px">
                    Received
                </div>
                <div style="flex: 1 0 50%">
                    Subject
                </div>
                <div style="flex: 1 1 20%">
                    From
                </div>
                <div style="flex: 1 1 20%">
                    To
                </div>
                <div style="flex: 0 1 50px ">Size</div>
                <div style="flex: 0 1 25px">
                    <i class="bi bi-paperclip"></i>
                </div>
            </header>
            @if (Model.Listing.Messages.Count == 0)
            {
                <div class="list-group-item  d-flex">
                    <div colspan="7">No messages... yet!</div>
                </div>
            }
            @for (int msgId = 0; msgId < Model.Listing.Messages.Count; msgId++)
            {
                var message = Model.Listing.Messages[msgId];
                <div href="/View?msgId=@message.Id" onclick="openwMsgView('@message.Id')" style="cursor: pointer;"
                     class='list-group-item list-group-item-action d-flex px-1 py-2 @(message.Read ? "" : "unread")' msg-id="@message.Id">
                    <div class="text-nowrap text-truncate" style="flex: 0 0 120px;">
                        @if (DateTime.UtcNow - message.ReceivedOn < TimeSpan.FromHours(1))
                        {
                            <span title="@message.ReceivedOn.ToLocalTime()">@(Math.Round((DateTime.UtcNow - message.ReceivedOn).TotalMinutes))m ago</span>
                        }
                        else if (DateTime.UtcNow - message.ReceivedOn <= TimeSpan.FromHours(72))
                        {
                            <span title="@message.ReceivedOn.ToLocalTime()">@(Math.Round((DateTime.UtcNow - message.ReceivedOn).TotalHours))h ago</span>
                        }
                        else
                        {
                            <span title="@message.ReceivedOn.ToLocalTime()">@message.ReceivedOn.ToString("yyyy-MM-dd")</span>
                        }
                    </div>

                    <div class="" style="flex: 1 0 50%">
                        @message.Subject
                    </div>
                    <div class="" style="flex: 1 1 20%">
                        @message.From
                    </div>
                    <div class="" style="flex: 1 1 20%">
                        @message.To
                    </div>
                    <div class="" style="flex: 0 1 50px;">
                        @(Math.Round(decimal.Divide(message.Size, 1024m)))k
                    </div>
                    <div class="" style="flex: 0 1 25px">
                        @(message.AttachementsCount)
                    </div>
                </div>
            }
        </div>

    </section>

    <section id="msg"
             style=" flex: 1 1 auto; resize: vertical; overflow-y: auto; border-left: 1pt solid var(--bs-border-color);"
             class="d-none">
        <div id="msg-view-container" style="display: none; position: relative;">
            <iframe id="msg-view" name="msg-view" style="width: 100%; height: 100px;"
                    src="data:text/html;base64,PGh0bWwgc3R5bGU9ImJhY2tncm91bmQ6IHJnYigzMywgMzcsIDQxKTsiPjwvaHRtbD4K"></iframe>
        </div>
    </section>
</div>

@section Scripts {
    <script>
        function initNavbar() {
            const params = new URLSearchParams(window.location.search);
            const onlyNew = params.get('onlyNew') != null ? params.get('onlyNew') == 'true' : false;
            const showTrash = params.get('showTrash') != null ? params.get('showTrash') == 'true' : false;

            if (showTrash) {
                const selector = `#btn-mailbox-trash`;
                const mailboxEl = document.querySelector(selector);
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-primary');
                return;
            }

            if (onlyNew && !showTrash) {
                const selector = `#btn-mailbox-inbox`;
                const mailboxEl = document.querySelector(selector);
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-primary');
            }
            else {
                const selector = `#btn-mailbox-all`;
                const mailboxEl = document.querySelector(selector);
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-primary');
            }
        }

        var previousListingScrollPos = 0;
        async function openwMsgView(msgId) {
            event.preventDefault();
            markMessageAsRead(msgId);
            let listEl = document.querySelector('.list');
            let listingEl = document.querySelector('.listing');
            previousListingScrollPos = listEl.scrollTop;
            console.log(previousListingScrollPos);
            listingEl.classList.add('d-none');
            let msgViewEl = document.getElementById('msg-view');
            msgViewEl.setAttribute('src', '/View?msgId=' + msgId);
            let sectionEl = document.querySelector('#msg');
            sectionEl.classList.remove('d-none');
            let containerEl = document.querySelector('#msg-view-container');
            containerEl.style.display = 'block';
        }

        function closeMsgView() {
            let sectionEl = document.querySelector('#msg');
            sectionEl.classList.add('d-none');
            let listingEl = document.querySelector('.listing');
            listingEl.classList.remove('d-none');
            let containerEl = document.querySelector('#msg-view-container');
            containerEl.style.display = 'none';
            let listEl = document.querySelector('.list');
            listEl.scroll(0, previousListingScrollPos);
        }

        async function markMessageAsRead(msgId) {
            const response = await fetch(`/api/messages/${msgId}/mark-as-read/`, {
                method: 'post'
            });
            const success = response.status == 200;
            if (success) {
                const selector = `[msg-id='${msgId}']`;
                const checkMarkEl = document.querySelector(selector);
                checkMarkEl.classList.remove('unread');
            }
        }

        function updateTrashCount(count) {
            const selector = 'sidebar--trash--count';
            const trashCountEl = document.getElementById(selector);
            const currentCount = parseInt(trashCountEl.innerText);
            trashCountEl.innerText = currentCount + 1;
        }

        async function deleteMessage(msgId) {
            const call = async () => {
                const response = await fetch(`/api/messages/${msgId}/delete/`, {
                    method: 'post'
                });
                const success = response.status == 200;
                if (success) {
                    const selector = `[msg-id='${msgId}']`;
                    const checkMarkEl = document.querySelector(selector);
                    checkMarkEl.parentElement.removeChild(checkMarkEl);
                    updateTrashCount();
                    closeMsgView();
                } else {
                    Swal.fire({
                        title: `Error`,
                        text: 'Could not process request.'
                    });
                }
            };

            let result = await Swal.fire({
                title: "Move message to trash?",
                showCancelButton: true,
                confirmButtonText: "Yes",
                showLoaderOnConfirm: true,
                preConfirm: call,
                allowOutsideClick: () => !Swal.isLoading()
            });

        }
        function handleMessage(event) {
            if (event.origin != window.location.origin) { return; }
            let msgType = event.data.split(':')[0];
            let msgParam = event.data.split(':')[1];
            switch (msgType) {
                case 'set-size':
                    document.querySelector('#msg-view').style.height = msgParam + 'px';
                    return;
                case 'close-msg':
                    closeMsgView();
                    return;
                case 'delete-msg':
                    deleteMessage(msgParam);
                    return;
            }
        }

        window.addEventListener('message', handleMessage, false);
        initNavbar();
    </script>
}