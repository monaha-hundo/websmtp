@page
@model IndexModel
@{
    // use compile time regex
    var regex = new System.Text.RegularExpressions.Regex(@"""(.+)"" <(.+)>");
}

<partial name="Sidebar" model="Model.Listing" />

<div class="content">
    <section class="listing d-flex flex-column h-100">

        <partial name="SearchForm" model="Model" />

        <div class="list list-group h-100 overflow-y-scroll position-relative">
            @if (Model.Listing.Messages.Count == 0)
            {
                <div class="list-group-item  d-flex">
                    <div colspan="7">No messages... yet!</div>
                </div>
            }
            @for (int msgId = 0; msgId < Model.Listing.Messages.Count; msgId++)
            {
                var message = Model.Listing.Messages[msgId];
                <div href="/View?msgId=@message.Id" onclick="openwMsgView('@message.Id')" style="cursor: pointer;"
                    class='list-group-item list-group-item-action  px-1 py-2 @(message.Read ? "" : "unread")'
                    msg-id="@message.Id">
                    <div class="row align-items-center g-0 px-2">
                        <div class="col-12 col-lg-2">
                            @foreach (var singleOrigin in message.From.Split(',', StringSplitOptions.RemoveEmptyEntries))
                            {
                                var result = regex.Matches(singleOrigin);
                                if (result.Count == 0)
                                {
                                    @message.From
                                }
                                else
                                {
                                    var name = result[0].Groups[1];
                                    var email = result[0].Groups[2]; ;
                                    <span class="" href="/compose?to=@email" title="@email" class="me-2">@name</span>
                                }
                            }
                        </div>
                        <div class="col-12 col-lg-9">
                            @message.Subject
                        </div>
                        <div class="col-12 col-lg-1">

                            @if (DateTime.UtcNow - message.ReceivedOn < TimeSpan.FromHours(1))
                            {
                                <span title="@message.ReceivedOn.ToLocalTime()">
                                    @(Math.Round((DateTime.UtcNow - message.ReceivedOn).TotalMinutes))m ago
                                </span>
                            }
                            else if (DateTime.UtcNow - message.ReceivedOn <= TimeSpan.FromHours(48))
                            {
                                <span title="@message.ReceivedOn.ToLocalTime()">
                                    @(Math.Round((DateTime.UtcNow - message.ReceivedOn).TotalHours))h ago
                                </span>
                            }
                            else
                            {
                                <span title="@message.ReceivedOn.ToLocalTime()">@message.ReceivedOn.ToString("dd MMMM")</span>
                            }

                            @if (message.AttachementsCount > 0)
                            {
                                <span class=""><i class="bi bi-paperclip"></i>@message.AttachementsCount</span>
                            }

                        </div>
                    </div>
                </div>
            }
        </div>

    </section>

    <section id="msg"
        style=" flex: 1 1 auto; resize: vertical; overflow-y: auto; border-left: 1pt solid var(--bs-border-color);"
        class="d-none">
        <div id="msg-view-container" style="display: none; position: relative;">

        </div>
    </section>

    <section id="new--message" 
    class="d-none"
    style="position: fixed; bottom: 0; right: 2em; width: 640px;">
        <iframe id="new--message-frame" src="/NewMessage" style="height: 100%; width: 100%;"></iframe>
    </section>
</div>

@section Scripts {
    <script>

        let onlyNew = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.OnlyNew));
        let showTrash = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ShowTrash));

        window.addEventListener("popstate", (event) => {
            closeMsgView();
        });


        function initNavbar() {
            //const params = new URLSearchParams(window.location.search);
            //const onlyNew = params.get('onlyNew') != null ? params.get('onlyNew') == 'true' : false;
            //const showTrash = params.get('showTrash') != null ? params.get('showTrash') == 'true' : false;
            let onlyNew = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.OnlyNew));
            let showTrash = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ShowTrash));

            if (showTrash) {
                const selector = `#btn-mailbox-trash`;
                const mailboxEl = document.querySelector(selector);
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-dark');
                return;
            }

            if (onlyNew && !showTrash) {
                const selector = `#btn-mailbox-inbox`;
                const mailboxEl = document.querySelector(selector);
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-dark');
            }
            else {
                const selector = `#btn-mailbox-all`;
                const mailboxEl = document.querySelector(selector);
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-dark');
            }
        }

        var previousListingScrollPos = 0;
        async function openwMsgView(msgId) {
            event.preventDefault();

            markMessageAsRead(msgId);
            let listEl = document.querySelector('.list');
            let listingEl = document.querySelector('.listing');

            previousListingScrollPos = listEl.scrollTop;
            listingEl.classList.add('d-none');

            let sectionEl = document.querySelector('#msg');
            let containerEl = document.querySelector('#msg-view-container');

            let msgViewEl = document.createElement('iframe');
            msgViewEl.id = 'msg-view';
            msgViewEl.style.width = '100%';
            msgViewEl.style.height = '100%';

            containerEl.appendChild(msgViewEl);

            msgViewEl.setAttribute('src', '/View?msgId=' + msgId);
            sectionEl.classList.remove('d-none');
            containerEl.style.display = 'block';

            history.pushState({ page: 'view', msgId }, "");
        }

        function closeMsgView() {
            let msgViewEl = document.getElementById('msg-view');
            msgViewEl.parentElement.removeChild(msgViewEl);
            let sectionEl = document.querySelector('#msg');
            sectionEl.classList.add('d-none');
            let listingEl = document.querySelector('.listing');
            listingEl.classList.remove('d-none');
            let containerEl = document.querySelector('#msg-view-container');
            containerEl.style.display = 'none';
            let listEl = document.querySelector('.list');
            listEl.scroll(0, previousListingScrollPos);
        }

        async function markMessageAsRead(msgId) {
            const response = await fetch(`/api/messages/${msgId}/mark-as-read/`, {
                method: 'post'
            });
            const success = response.status == 200;
            if (success) {
                const selector = `[msg-id='${msgId}']`;
                const checkMarkEl = document.querySelector(selector);
                checkMarkEl.classList.remove('unread');
            }
        }

        function updateTrashCount(count) {
            if (count == null) count = 1;
            const selector = 'sidebar--trash--count';
            const trashCountEl = document.getElementById(selector);
            const currentCount = parseInt(trashCountEl.innerText);
            trashCountEl.innerText = currentCount + 1;
        }

        async function undeleteMessage(msgId) {
            const call = async () => {
                const response = await fetch(`/api/messages/${msgId}/undelete/`, {
                    method: 'post'
                });
                const success = response.status == 200;
                if (success) {
                    const selector = `[msg-id='${msgId}']`;
                    const checkMarkEl = document.querySelector(selector);
                    checkMarkEl.parentElement.removeChild(checkMarkEl);
                    updateTrashCount(-1);
                    //closeMsgView();
                    let msgViewEl = document.getElementById('msg-view');
                    let url = msgViewEl.getAttribute('src');
                    msgViewEl.setAttribute('src', url);
                } else {
                    Swal.fire({
                        title: `Error`,
                        text: 'Could not process request.'
                    });
                }
            };

            let result = await Swal.fire({
                title: "Restore message?",
                showCancelButton: true,
                confirmButtonText: "Yes",
                showLoaderOnConfirm: true,
                preConfirm: call,
                allowOutsideClick: () => !Swal.isLoading()
            });

        }


        async function deleteMessage(msgId) {
            const call = async () => {
                const response = await fetch(`/api/messages/${msgId}/delete/`, {
                    method: 'post'
                });
                const success = response.status == 200;
                if (success) {
                    const selector = `[msg-id='${msgId}']`;
                    const checkMarkEl = document.querySelector(selector);
                    checkMarkEl.parentElement.removeChild(checkMarkEl);
                    updateTrashCount(1);
                    closeMsgView();
                } else {
                    Swal.fire({
                        title: `Error`,
                        text: 'Could not process request.'
                    });
                }
            };

            let result = await Swal.fire({
                title: "Move message to trash?",
                showCancelButton: true,
                confirmButtonText: "Yes",
                showLoaderOnConfirm: true,
                preConfirm: call,
                allowOutsideClick: () => !Swal.isLoading()
            });

        }

        function previousMessage(msgId) {
            const selector = `[msg-id='${msgId}']`;
            const checkMarkEl = document.querySelector(selector);
            const prevMsgId = checkMarkEl.previousElementSibling.getAttribute('msg-id');
            closeMsgView();
            openwMsgView(prevMsgId);
        }

        function nextMessage(msgId) {
            const selector = `[msg-id='${msgId}']`;
            const checkMarkEl = document.querySelector(selector);
            const prevMsgId = checkMarkEl.nextElementSibling.getAttribute('msg-id');
            closeMsgView();
            openwMsgView(prevMsgId);
        }

        function handleMessage(event) {
            if (event.origin != window.location.origin) { return; }
            let msgType = event.data.split(':')[0];
            let msgParam = event.data.split(':')[1];
            switch (msgType) {
                case 'set-size':
                    document.querySelector('#msg-view').style.height = msgParam + 'px';
                    return;
                case 'close-msg':
                    //closeMsgView();
                    history.back();
                    return;
                case 'undelete-msg':
                    undeleteMessage(msgParam);
                    return;
                case 'delete-msg':
                    deleteMessage(msgParam);
                    return;
                case 'previous-msg':
                    previousMessage(msgParam);
                    return;
                case 'next-msg':
                    nextMessage(msgParam);
                    return;
            }
        }

        function newMessage(to){
            let sectionEl = window.parent.document.getElementById('new--message');
            let iframeEl = window.parent.document.getElementById('new--message-frame');
            if(to == null){
                iframeEl.src = '/NewMessage';
            }else{
                iframeEl.src = '/NewMessage?initialTo=' + to;
            }
            sectionEl.classList.remove('d-none');
        }

        window.addEventListener('message', handleMessage, false);
        initNavbar();
    </script>
}