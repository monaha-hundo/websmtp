@page
@model IndexModel
@{
    ViewData["Title"] = "websmtp";
}

<nav class="sidebar">
    <section>
        <div class="h2 my-2">
            <i class="bi bi-fire"></i>
            websmtp
        </div>
        <div class="my-2 text-muted">
            <div>
                <small>Messages: @(Model.Listing.Total)</small>
            </div>
            <div>
                <small>New: @(Model.Listing.New)</small>
            </div>
        </div>
    </section>
    <nav class="nav nav-pills d-flex flex-column">
        <li class="nav-item mb-2 d-flex">
            <a class="btn d-inline-flex align-items-center rounded border-0 btn-transparent-primary" style="flex: 1 1 auto;"
                id="btn-mailbox-all"
                href="/?onlyNew=true">
                <i class="bi bi-inboxes"></i>
                <span class="ms-2">Inbox</span>
            </a>
            <a class="btn d-inline-flex align-items-center rounded border-0 btn-transparent-primary" style="flex: 1 1 auto;"
                id="btn-mailbox-all"
                href="/?onlyNew=false">
                <i class="bi bi-inboxes"></i>
                <span class="ms-2">All Mail</span>
            </a>
        </li>
    </nav>
</nav>

<div data-bs-theme="dark" style="height:100%; flex: 1 1 auto; display: flex; flex-direction: column; ">

    <div class="input-group my-2">
        <span class="input-group-text" id="basic-addon1">Search</span>
        <input type="text" class="form-control me-2" placeholder="Any text value" aria-label="Any text value"
            aria-describedby="basic-addon1"/>
            <span class="input-group-text me-2 rounded" id="basic-addon2">
                <a class="btn" href="/logout">Logout</a>
            </span>
    </div>

    <section class="" style="
        height: 300px; 
        resize: vertical; 
        overflow-y: scroll;  
        border-left: 1pt solid var(--bs-border-color);
        border-top: 1pt solid var(--bs-border-color); 
        border-bottom: 1pt solid var(--bs-border-color); 
        border-top-left-radius: var(--bs-border-radius);
        position: relative;">
        <table class="table table-dark table-hover table-striped table-sm m-0"
            style="position: sticky; top: 0; z-index: 1; table-layout: fixed;">
            <thead>
                <tr>
                    <th style="width: 130px">
                        Received
                    </th>
                    <th style="width: calc((100% - 255px)+16%);">
                        Subject
                    </th>
                    <th style="width: calc((100% - 255px)+16%);">
                        From
                    </th>
                    <th style="width: calc((100% - 255px)+16%);">
                        To
                    </th>
                    <th style="width: 75px">Size</th>
                    <th style="width: 50px">
                        <i class="bi bi-paperclip"></i>
                    </th>
                </tr>
            </thead>
        </table>
        <div class="table-responsive" style="max-heigh: 30vh; ">
            <table class="table table-fixed table-dark table-hover table-striped table-sm m-0 align-middle"
                style="position: relative; table-layout: fixed;">
                @if (Model.Listing.Messages.Count == 0)
                {
                    <tr>
                        <th colspan="7">No messages... yet!</th>
                    </tr>
                }
                @for (int msgId = 0; msgId < Model.Listing.Messages.Count; msgId++)
                {
                    var message = Model.Listing.Messages[msgId];
                    <tr onclick="openwMsgView('@message.Id')" style="cursor: pointer;"
                        class='@(message.Read ? "" : "unread")' msg-id="@message.Id">
                        <td class="text-nowrap text-truncate" style="width: 130px;">
                            @if (message.ReceivedOn.Date == DateTime.UtcNow.Date)
                            {
                                <span>@message.ReceivedOn.ToString("HH:mm")</span>
                            }
                            else
                            {
                                <span title="@message.ReceivedOn.ToLocalTime()">@message.ReceivedOn.ToString("yyyy-MM-dd")</span>
                            }
                        </td>
                        <td class="text-nowrap text-truncate" style="width: calc((100% - 255px)+16%);">
                            <span>@message.Subject</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: calc((100% - 255px)+16%);">
                            <span>@message.From</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: calc((100% - 255px)+16%);">
                            <span>@message.To</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: 75px;">
                            <span>@(Math.Round(decimal.Divide(message.Size, 1024m)))k</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: 50px">
                            <span>@(message.Attachements.Count)</span>
                        </td>
                    </tr>
                }
            </table>
        </div>

    </section>

    <section id="msg"
        style=" flex: 1 1 auto; resize: vertical; overflow-y: auto; border-left: 1pt solid var(--bs-border-color);">
        <div id="msg-view-container" style="display: none;padding: 1em; padding-top: 0;">
            <iframe id="msg-view" name="msg-view" style="width: 100%; height: 100px;"
                src="data:text/html;base64,PGh0bWwgc3R5bGU9ImJhY2tncm91bmQ6IHJnYigzMywgMzcsIDQxKTsiPjwvaHRtbD4K"></iframe>
        </div>
    </section>
</div>

@section Scripts {
    <script>
        function openwMsgView(msgId) {
            let sectionEl = document.querySelector('#msg-view-container');
            sectionEl.style.display = 'block';
            let msgViewEl = document.getElementById('msg-view');
            msgViewEl.setAttribute('src', '/View?msgId=' + msgId);
            markMessageAsRead(msgId);
        }
        function closeMsgView() {
            let sectionEl = document.querySelector('#msg-view-container');
            sectionEl.style.display = 'none';
        }
        function handleMessage(event) {
            if (event.origin != window.location.origin) { return; }
            let height = event.data.split(':')[1];
            document.querySelector('#msg-view').style.height = height + 'px';
        }
        async function markMessageAsRead(msgId) {
            const response = await fetch(`/?markAsReadMsgId=${msgId}`);
            const result = await response.text();
            const success = result == "200";
            console.log(success);
            if (success) {
                        const selector = `tr[msg-id='${msgId}']`;
                console.log(selector);
                const checkMarkEl = document.querySelector(selector);
                checkMarkEl.classList.remove('unread');
            }
        }

        window.addEventListener('message', handleMessage, false);
        initNavbar();
    </script>
}