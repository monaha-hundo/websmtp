@page
@model IndexModel
@{
    ViewData["Title"] = "websmtp";
}

<nav class="sidebar">
    <section>
        <div class="h2 my-2">
            <i class="bi bi-fire"></i>
            websmtp
        </div>
    </section>
    <nav class="nav nav-pills d-flex flex-column">
        <div class="nav-item mb-2 d-flex">
            <a class="btn d-flex align-items-center rounded border-0 btn-transparent-primary" style="flex: 1 1 auto;"
               id="btn-mailbox-all"
               href="/?onlyNew=false">
                <i class="bi bi-inboxes"></i>
                <span class="ms-2">All Mail</span>
                <span style="margin-left: auto;">(@Model.Listing.Total)</span>
            </a>
        </div>
        <div class="nav-item mb-2 d-flex">
            <a class="btn d-flex align-items-center rounded border-0 btn-transparent-primary" style="flex: 1 1 auto;"
               id="btn-mailbox-inbox"
               href="/?onlyNew=true">
                <i class="bi bi-inbox"></i>
                <span class="ms-2">Inbox</span>
                <span style="margin-left: auto;"> (@Model.Listing.New)</span>
            </a>
        </div>
    </nav>
</nav>

<div data-bs-theme="dark" style="height:100%; flex: 1 1 auto; display: flex; flex-direction: column; ">

    <form class="d-flex" action="/" method="get">
        <input type="hidden" name="onlyNew" id="onlyNew" value="@Model.OnlyNew.ToString().ToLower()"/>
        <div class="input-group input-group-sm my-2">
            <span class="input-group-text" id="basic-addon1">Filter</span>
            <input name="filter" id="filter"
                    type="text" class="form-control from-control-sm" placeholder="Any text value" aria-label="Any text value"
                   aria-describedby="basic-addon1" />
        </div>
        <a class="btn btn-secondary mx-2 my-2" href="/logout" style="flex: 1 1 140px">
            <i class="bi bi-door-open"></i> Disconnect
        </a>
    </form>

    <section class="" style="
        height: 300px;
        resize: vertical;
        overflow-y: scroll;
        border-left: 1pt solid var(--bs-border-color);
        border-top: 1pt solid var(--bs-border-color);
        border-bottom: 1pt solid var(--bs-border-color);
        border-top-left-radius: var(--bs-border-radius);
        position: relative;">
        <table class="table table-dark table-hover table-striped table-sm m-0"
               style="position: sticky; top: 0; z-index: 1; table-layout: fixed;">
            <thead>
                <tr>
                    <th style="width: 130px">
                        Received
                    </th>
                    <th style="width: calc((100% - 255px)+16%);">
                        Subject
                    </th>
                    <th style="width: calc((100% - 255px)+16%);">
                        From
                    </th>
                    <th style="width: calc((100% - 255px)+16%);">
                        To
                    </th>
                    <th style="width: 75px">Size</th>
                    <th style="width: 50px">
                        <i class="bi bi-paperclip"></i>
                    </th>
                </tr>
            </thead>
        </table>
        <div class="table-responsive" style="max-heigh: 30vh; ">
            <table class="table table-fixed table-dark table-hover table-striped table-sm m-0 align-middle"
                   style="position: relative; table-layout: fixed;">
                @if (Model.Listing.Messages.Count == 0)
                {
                    <tr>
                        <th colspan="7">No messages... yet!</th>
                    </tr>
                }
                @for (int msgId = 0; msgId < Model.Listing.Messages.Count; msgId++)
                {
                    var message = Model.Listing.Messages[msgId];
                    <tr onclick="openwMsgView('@message.Id')" style="cursor: pointer;"
                        class='@(message.Read ? "" : "unread")' msg-id="@message.Id">
                        <td class="text-nowrap text-truncate" style="width: 130px;">
                            @if (message.ReceivedOn.Date == DateTime.UtcNow.Date)
                            {
                                <span>@message.ReceivedOn.ToString("HH:mm")</span>
                            }
                            else
                            {
                                <span title="@message.ReceivedOn.ToLocalTime()">@message.ReceivedOn.ToString("yyyy-MM-dd")</span>
                            }
                        </td>
                        <td class="text-nowrap text-truncate" style="width: calc((100% - 255px)+16%);">
                            <span>@message.Subject</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: calc((100% - 255px)+16%);">
                            <span>@message.From</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: calc((100% - 255px)+16%);">
                            <span>@message.To</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: 75px;">
                            <span>@(Math.Round(decimal.Divide(message.Size, 1024m)))k</span>
                        </td>
                        <td class="text-nowrap text-truncate" style="width: 50px">
                            <span>@(message.AttachementsCount)</span>
                        </td>
                    </tr>
                }
            </table>
        </div>

    </section>

    <section id="msg"
             style=" flex: 1 1 auto; resize: vertical; overflow-y: auto; border-left: 1pt solid var(--bs-border-color);">
        <div id="msg-view-container" style="display: none;padding: 1em; padding-top: 0;">
            <iframe id="msg-view" name="msg-view" style="width: 100%; height: 100px;"
                    src="data:text/html;base64,PGh0bWwgc3R5bGU9ImJhY2tncm91bmQ6IHJnYigzMywgMzcsIDQxKTsiPjwvaHRtbD4K"></iframe>
        </div>
    </section>
</div>

@section Scripts {
    <script>
        function initNavbar() {
            const params = new URLSearchParams(window.location.search);
            const onlyNew = params.get('onlyNew') != null ? params.get('onlyNew') == 'true' : false;

            if (onlyNew) {
                const selector = `#btn-mailbox-inbox`;
                const mailboxEl = document.querySelector(selector);
                console.log(selector, mailboxEl)
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-primary');
            }
            else {
                const selector = `#btn-mailbox-all`;
                const mailboxEl = document.querySelector(selector);
                mailboxEl.classList.remove('btn-transparent-primary');
                mailboxEl.classList.add('btn-primary');
            }
        }

        function openwMsgView(msgId) {
            let sectionEl = document.querySelector('#msg-view-container');
            sectionEl.style.display = 'block';
            let msgViewEl = document.getElementById('msg-view');
            msgViewEl.setAttribute('src', '/View?msgId=' + msgId);
            markMessageAsRead(msgId);
        }
        function closeMsgView() {
            let sectionEl = document.querySelector('#msg-view-container');
            sectionEl.style.display = 'none';
        }
        function handleMessage(event) {
            if (event.origin != window.location.origin) { return; }
            let height = event.data.split(':')[1];
            document.querySelector('#msg-view').style.height = height + 'px';
        }
        async function markMessageAsRead(msgId) {
            const response = await fetch(`/api/messages/${msgId}/mark-as-read/`, {
                method: 'post'
            });
            console.log(response);
            const success = response.status == 200;
            if (success) {
                const selector = `tr[msg-id='${msgId}']`;
                const checkMarkEl = document.querySelector(selector);
                checkMarkEl.classList.remove('unread');
            }
        }

        window.addEventListener('message', handleMessage, false);
        initNavbar();
    </script>
}