@page
@model MessageViewModel
@{
    Layout = "_LayoutEmpty";
}

@section Head {
    <link rel="stylesheet" href="~/css/view.css" />
}

<input id="msg--id" type="hidden" value="@Model.MsgId" />

<div class="w-100 text-white">
    <div id="view--msg--header" class="p-2 mb-2 border-bottom d-flex align-items-center" role="group"
        aria-label="Basic example">
        <button id="btn--close" type="button" class="btn btn-secondary me-2">
            <i class="bi bi-arrow-left"></i>
        </button>
        <button id="btn--previous" type="button" class="btn btn-secondary me-2">
            <i class="bi bi-arrow-up"></i>
        </button>
        <button id="btn--next" type="button" class="btn btn-secondary me-2">
            <i class="bi bi-arrow-down"></i>
        </button>
        <button id="btn--raw" type="button" class="btn btn-secondary me-2">
            <i class="bi bi-file-earmark-code"></i>
        </button>
        @if (!Model.Message.Sent)
        {
            <div class="me-2">
                <button id="btn--undelete" type="button" class='btn btn-secondary @(Model.Message.Deleted?"":"d-none")'>
                    <i class="bi bi-recycle"></i>
                </button>
                <button id="btn--delete" type="button" class='btn btn-secondary @(Model.Message.Deleted?"d-none":"")'>
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        }
        <div class="me-2">
            <button id="btn--unread" type="button" class='btn btn-secondary @(Model.Message.Read?"":"d-none")'>Mark
                Unread</button>
            <button id="btn--read" type="button" class='btn btn-secondary @(Model.Message.Read?"d-none":"")'>Mark as
                read</button>
        </div>
    </div>

    <h3 class="my-3 mx-4 px-1 pe-5">@Model.Message.Subject</h3>


    <div class="border rounded p-3 mx-4">
        <div class="d-flex align-items-center">
            <div class="my-2">
                <span class="fw-bold d-inline-block mw-50px">Date:</span>
                @Model.Message.ReceivedOn.Date.ToLongDateString()
                @switch (Model.Message.Importance)
                {
                    case "High":
                        <i class="bi bi-exclamation-circle mx-2 fs-1_5rem text-danger"></i>
                        <span class="fw-bold d-inline-block mw-50px">High Priority</span>
                        break;
                    case "Low":
                        <i class="bi bi-thermometer-low mx-2 fs-1_5rem text-secondary"></i>
                        <span class="fw-bold d-inline-block mw-50px">Low Priority</span>
                        break;
                    default:
                        break;
                }
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <div class="my-2">
                <span class="fw-bold d-inline-block mw-50px">From:</span>
                <partial name="MailboxAddresses" model="Model.Message.From" />
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <div class="my-2">
                <span class="fw-bold d-inline-block mw-50px">To:</span>
                <partial name="MailboxAddresses" model="Model.Message.To" />
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(Model.Message.Cc))
        {
            <div class="d-flex justify-content-between">
                <div class="my-2">
                    <span class="fw-bold d-inline-block mw-50px">Cc:</span>
                    <partial name="MailboxAddresses" model="Model.Message.Cc" />
                </div>
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(Model.Message.Bcc))
        {
            <div class="d-flex justify-content-between">
                <div class="my-2">
                    <span class="fw-bold d-inline-block mw-50px">Bcc:</span>
                    <partial name="MailboxAddresses" model="Model.Message.Bcc" />
                </div>
            </div>
        }

        @if (!Model.Message.Sent)
        {
            <div class="d-flex justify-content-between">
                <div class="my-2 d-flex align-items-center">
                    <span class="fw-bold d-inline-block mw-50px ">Spam:</span>
                    <span id="label--is--spam"
                        class='text-decoration-none badge rounded-pill text-bg-danger fs-6 me-2 @(Model.Message.IsSpam ? "":"d-none")'>
                        SPAM
                        <i class="bi bi-emoji-frown"></i>
                    </span>
                    <span id="label--not--spam"
                        class='text-decoration-none badge rounded-pill text-bg-success fs-6 me-2 @(Model.Message.IsSpam ? "d-none":"")'>
                        Not Spam
                        <i class="bi bi-emoji-smile"></i>
                    </span>

                    <button id="btn--report--spam" class='btn btn-sm btn-danger @(Model.Message.IsSpam ? "d-none":"")'>
                        Report spam
                    </button>
                    <button id="btn--unreport--spam" class='btn btn-sm btn-success @(Model.Message.IsSpam ? "":"d-none")'>
                        Not spam
                    </button>   
                </div>
            </div>
        }

        @if (Model.Message.Attachements.Count > 0)
        {
            <div class="mb-2 p-2">
                @foreach (var att in Model.Message.Attachements)
                {
                    <a class="badge rounded-pill fs-6 text-bg-primary p-2 text-decoration-none"
                        href="/api/messages/@Model.Message.Id/attachements/@att.Filename">
                        <i class="bi bi-paperclip"></i>
                        @att.Filename
                    </a>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(Model.Message.HtmlContent))
        {
            <div class="fw-bold my-2">Html Content</div>
            <iframe id="html-content" class="w-100 rounded-3" src="/api/messages/@(Model.Message.Id).html"></iframe>
        }

        @if (!string.IsNullOrEmpty(Model.Message.TextContent))
        {
            <div class="fw-bold my-2">Text Content</div>
            <div class="card outlined p-2 text-white">@Model.Message.TextContent</div>
        }

        @if (!string.IsNullOrEmpty(Model.Message.Headers))
        {

            <button class="accordion-button fw-bold my-2" type="button" data-bs-toggle="collapse"
                data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Headers <span class="ms-2 text-secondary">Click to toggle visibility</span>
            </button>

            <div class="accordion accordion-flush" id="accordionExample">
                <div class="accordion-item">
                    <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <pre class="whitespace--brsp text-white">@Model.Message.Headers</pre>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Model.Message.RawMessage != null)
        {
            <div class="mt-2">
                <div class="fw-bold">Raw</div>
                <pre>@System.Text.UTF8Encoding.UTF8.GetString(Model.Message.RawMessage.Content)</pre>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"> </script>
    <script src="~/js/view.js"> </script>
}