@model MailAddressListViewModel
<div id="@Model.ContainerId" class="row align-items-center my-2 g-o position-relative @Model.ContainerClass">
    <div class="col col-auto new--message-label-min-width">
        @Model.Label:
    </div>
    <div class="col d-flex align-items-center justify-content-start flex-wrap">
        <span v-for="dest in destinations" :key="'@Html.Raw(@Model.ContainerId)'+dest.name"
            class="text-decoration-none badge rounded-pill text-bg-light fs-6 me-2" :title="dest.email"
            @@click="removeDest(dest)">{{dest.name}}</span>
        <button class="btn btn-outline-neutral" @@click="addDest" type="button">
            <i class="bi bi-plus"></i>
        </button>
        @if (Model.ShowCCandBCC)
        {
            <button id="show--cc" class="btn btn-outline-neutral ms-2" type="button" onclick="showCC()">
                CC
            </button>
            <button id="show--bcc" class="btn btn-outline-neutral ms-2" type="button" onclick="showBCC()">
                BCC
            </button>
        }
        <input ref="input" id="@Model.Id" name="@Model.Id" class="form-control invisible position-absolute"
            :value="concatenatedDestinations" @@change="valueChanged" />
    </div>
</div>
<script>
    var app = Vue.createApp({
        data() {
            return {
                destinations: []
            }
        },
        computed: {
            concatenatedDestinations() {
                return this.destinations.map(d => `"${d.name}" <${d.email}>`).join(", ");
            }
        },
        methods: {
            addDest(e) {
                Swal.fire({
                    title: 'Add Destination',
                    html: `
                        <input type="text" id="email" class="form-control mb-2" placeholder="Email Address">
                        <input type="text" id="name" class="form-control" placeholder="Name (optional)">
                    `,
                    confirmButtonText: 'Add',
                    showCancelButton: true,
                    buttonsStyling: false,
                    customClass: {
                        confirmButton: 'btn btn-primary',
                        cancelButton: 'btn btn-secondary ms-2'
                    },
                    showClass: {
                        popup: ''
                    },
                    hideClass: {
                        popup: ''
                    },
                    focusConfirm: false,
                    didOpen: () => {
                        const popup = Swal.getPopup();
                        var emailInput = popup.querySelector('#email');
                        var nameInput = popup.querySelector('#name');
                        emailInput.onkeyup = (event) => event.key === 'Enter' && Swal.clickConfirm();
                        nameInput.onkeyup = (event) => event.key === 'Enter' && Swal.clickConfirm();
                    },
                    preConfirm: () => {
                        const popup = Swal.getPopup();
                        var emailInput = popup.querySelector('#email');
                        var nameInput = popup.querySelector('#name');
                        var email = emailInput.value;
                        var name = nameInput.value;
                        if (!email && !name) {
                            Swal.showValidationMessage(`Please enter at least an email address.`);
                        } else if (!email) {
                            Swal.showValidationMessage(`Please enter at an email address.`);
                        }
                        if (name == '') {
                            name = email;
                        }
                        this.destinations.push({ name, email });
                        return;
                    },
                });
            },
            removeDest(dest) {
                var i = this.destinations.indexOf(dest);
                this.destinations.splice(i, 1);
            },
            valueChanged(evt) {
                let newValue = this.$refs['input'].value;
                if (newValue == null || newValue == '') return;

                var splitedValues = newValue.split(',');

                for (var i = 0; i < splitedValues.length; i++) {
                    const regex = /"(.+)" <(.+)>/g;
                    let val = splitedValues[i];
                    let newDests = [...val.matchAll(regex)];
                    console.log('sdfaasdf:' + newDests);

                    if (newDests.length == 0) {
                        this.destinations.push({ name: val, email: val });
                        continue;
                    }

                    let name = newDests[0][1];
                    let email = newDests[0][2];
                    this.destinations.push({ name, email });
                }
            }
        }
    });
    app.mount('#@Html.Raw(@Model.ContainerId)');
</script>